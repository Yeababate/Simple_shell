#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>

void handle_sigint(int sig) {
    (void)sig; // Suppress unused parameter warning
    printf("\nShell terminated.\n");
    exit(0);
}

int main() {
    signal(SIGINT, handle_sigint);

    char command[256];

    while (1) {
        printf("$ ");
        if (fgets(command, sizeof(command), stdin) == NULL) {
            // Handle end-of-file (Ctrl+D)
            printf("\nShell terminated.\n");
            break;
        }

        // Remove the newline character from the input
        size_t input_length = strlen(command);
        if (input_length > 0 && command[input_length - 1] == '\n') {
            command[input_length - 1] = '\0';
        }

        // Execute the command if it exists in the current directory
        if (access(command, X_OK) == 0) {
            if (fork() == 0) {
                // Child process
                execlp(command, command, NULL);
                perror("Execution failed");
                exit(1);
            } else {
                // Parent process
                wait(NULL);
            }
        } else {
            printf("Command '%s' not found\n", command);
        }
    }

    return 0;
}

